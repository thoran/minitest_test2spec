#!/usr/bin/env ruby
# minitest_assertion2spec

# 20180729
# 0.5.1

# Changes:
# 1. + assert_nil2must_be_nil().
# 0/1
# 2. + tests.
# 3. ~ assert_nil2must_be_nil(), because I made the capture group matcher non-greedy, when it should have been greedy.  Good thing I had tests!

# Todo:
# 1. Don't use Files (or similar approaches) because each file is being opened multiple times; which is ironic given that I started writing this for converting Files' tests.

require 'Files'
require 'fileutils'
require 'tempfile'

def path
  @path ||= ARGV[0]
end

def filenames
  @filenames ||= Files.find(path: path, pattern: '**/*.rb', return_files_object: true).paths
end

def class2describe
  filenames.each do |filename|
    temp_file = Tempfile.new(filename + '.tmp')
    begin
      existing_file_contents = File.read(filename)
      new_file_contents = existing_file_contents.gsub(/class +TC(_*)(.+?)_(.+) +< +MiniTest::Test/, "describe \"\\2 \\3\" do")
      temp_file.puts new_file_contents
      temp_file.close
      FileUtils.mv(temp_file.path, filename)
    ensure
      temp_file.close
      temp_file.unlink
    end
  end
end

def setup2before
  replacement_pattern = /def setup/
  replacement_text = 'before do'
  Files.gsub!(filenames, replacement_pattern, replacement_text)
end

def teardown2after
  replacement_pattern = /def teardown/
  replacement_text = 'after do'
  Files.gsub!(filenames, replacement_pattern, replacement_text)
end

def test2describeit
  filenames.each do |filename|
    temp_file = Tempfile.new(filename + '.tmp')
    begin
      File.open(filename, 'r') do |f|
        in_test_method = false
        test_method_pattern = /^ *def +test_(.+?)$/
        f.each_line do |line|
          if in_test_method
            if line =~ /end$/
              in_test_method = false
              temp_file.puts '    end' + "\n"
              temp_file.puts '  end' + "\n"
            else
              temp_file.puts '  ' + line
            end
          elsif line =~ test_method_pattern
            in_test_method = true
            md = line.match(test_method_pattern)
            temp_file.puts '  describe ' + '"' + md[1].gsub('_', ' ') + '"' + ' do' + "\n"
            temp_file.puts '    it "works" do' + "\n"
          else
            temp_file.puts line
          end
        end
      end
      temp_file.close
      FileUtils.mv(temp_file.path, filename)
    ensure
      temp_file.close
      temp_file.unlink
    end
  end
end

def assert_equal2must_equal
  filenames.each do |filename|
    temp_file = Tempfile.new(filename + '.tmp')
    begin
      existing_file_contents = File.read(filename)
      new_file_contents = existing_file_contents.gsub(/assert_equal +(.+), +(.+)/, "expect\(\\2\).must_equal \\1")
      temp_file.puts new_file_contents
      temp_file.close
      FileUtils.mv(temp_file.path, filename)
    ensure
      temp_file.close
      temp_file.unlink
    end
  end
end

def assert_matcher2must_match
  filenames.each do |filename|
    temp_file = Tempfile.new(filename + '.tmp')
    begin
      existing_file_contents = File.read(filename)
      new_file_contents = existing_file_contents.gsub(/assert +(.+?) +=\~ +(.+)/, "expect\(\\1\).must_match \\2")
      temp_file.puts new_file_contents
      temp_file.close
      FileUtils.mv(temp_file.path, filename)
    ensure
      temp_file.close
      temp_file.unlink
    end
  end
end

def assert_nil2must_be_nil
  filenames.each do |filename|
    temp_file = Tempfile.new(filename + '.tmp')
    begin
      existing_file_contents = File.read(filename)
      new_file_contents = existing_file_contents.gsub(/assert_nil +(.+)/, "expect\(\\1\).must_be_nil")
      temp_file.puts new_file_contents
      temp_file.close
      FileUtils.mv(temp_file.path, filename)
    ensure
      temp_file.close
      temp_file.unlink
    end
  end
end

def main
  class2describe
  setup2before
  teardown2after
  test2describeit
  assert_equal2must_equal
  assert_matcher2must_match
  assert_nil2must_be_nil
end

main
